generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//TODO: deal with passwords
model User {
  userId             String             @id
  first_name         String
  last_name          String
  email              String             @unique
  coach              User?              @relation(name: "client_coach", fields: [coachId], references: [userId])
  coachId            String?
  clients            User[]             @relation(name: "client_coach")
  role               String
  events             Event[]
  coach_plans        Plan[]             @relation(name: "coach_plan")
  user_plans         Plan[]             @relation(name: "client_plan")
  babies             Baby[]             @relation(name: "baby_parent")
  onboarding_answers OnboardingAnswer[]
}

model Event {
  eventId   String   @id
  owner     User     @relation(fields: [ownerId], references: [userId])
  ownerId   String
  startTime DateTime @db.Timestamptz()
  endTime   DateTime @db.Timestamptz()
  type      String
}

model Plan {
  planId    String     @id
  client    User       @relation(name: "client_plan", fields: [clientId], references: [userId])
  clientId  String
  coach     User       @relation(name: "coach_plan", fields: [coachId], references: [userId])
  coachId   String
  reminders Reminder[] @relation(name: "plan_reference")
  Status    String
}

model Reminder {
  reminderId  String   @id
  plan        Plan     @relation(name: "plan_reference", fields: [planId], references: [planId])
  planId      String
  description String
  timestamp   DateTime @db.Timestamptz()
}

model Baby {
  babyId             String             @id
  parent             User               @relation(name: "baby_parent", fields: [parentId], references: [userId])
  parentId           String
  name               String
  dob                DateTime           @db.Date
  weight             Float?
  // We can make a medicine table if needed later
  medicine           String
  onboarding_answers OnboardingAnswer[]
}

model OnboardingQuestion {
  questionId        String             @id
  description       String
  type              String
  onboarding_screen Int
  OnboardingAnswer  OnboardingAnswer[]
}

model OnboardingAnswer {
  answerId    String             @id
  answer_text String
  question    OnboardingQuestion @relation(fields: [questionId], references: [questionId])
  questionId  String
  user        User               @relation(fields: [userId], references: [userId])
  userId      String
  baby        Baby               @relation(fields: [babyId], references: [babyId])
  babyId      String
}

// TODO: Will do this one when we are actually building the chat out.
// model Message {}
