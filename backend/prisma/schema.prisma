generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId             String             @id
  coachId            String?
  role               String
  email              String             @unique
  first_name         String
  last_name          String
  babies             Baby[]             @relation("baby_parent")
  events             Event[]
  onboarding_answers OnboardingAnswer[]
  user_plans         Plan[]             @relation("client_plan")
  coach_plans        Plan[]             @relation("coach_plan")
  coach              User?              @relation("client_coach", fields: [coachId], references: [userId])
  clients            User[]             @relation("client_coach")
  medicines          Medicine[]
}

model Event {
  eventId      String    @id @default(uuid())
  ownerId      String
  startTime    DateTime  @db.Timestamptz(6)
  endTime      DateTime? @db.Timestamptz(6)
  type         String
  amount       Float?
  foodType     String?
  note         String?
  unit         String?
  medicineType String?
  owner        User      @relation(fields: [ownerId], references: [userId])
  cribStartTime DateTime?  @db.Timestamptz()
  cribStopTime DateTime?  @db.Timestamptz()
  sleepWindows SleepWindow[]
  // We will have to link this to baby eventually,
  //  but we first have to figure out how to handle users with multiple babies
  // baby      Baby      @relation(fields: [babyId], references: [babyId])
  // babyId    String
}

model SleepWindow {
  windowId     String    @id @default(uuid())
  event        Event     @relation(fields: [eventId], references: [eventId])
  eventId      String
  startTime    DateTime  @db.Timestamptz()
  stopTime     DateTime  @db.Timestamptz()
  isSleep      Boolean
  note        String
}

model Plan {
  planId    String     @id @default(uuid())
  client    User       @relation(name: "client_plan", fields: [clientId], references: [userId])
  clientId  String
  coachId   String
  coach     User       @relation("coach_plan", fields: [coachId], references: [userId])
  reminders Reminder[] @relation("plan_reference")
}


model Reminder {
  reminderId  String   @id @default(uuid())
  plan        Plan     @relation(name: "plan_reference", fields: [planId], references: [planId])
  planId      String
  description String
  startTime DateTime  @db.Timestamptz()
  endTime   DateTime? @db.Timestamptz()
}

model File {
  fileId    String       @id @default(uuid())
  filename  String
  url      String
  baby    Baby         @relation(fields: [babyId], references: [babyId])
  babyId  String
}

model Baby {
  babyId             String             @id
  parentId           String
  name               String
  dob                DateTime           @db.Date
  weight             Float?
  medicine           String?
  parent             User               @relation("baby_parent", fields: [parentId], references: [userId])
  onboarding_answers OnboardingAnswer[]
  files              File[]
}

model OnboardingQuestion {
  questionId        String             @id
  description       String
  type              String
  onboarding_screen Int
  OnboardingAnswer  OnboardingAnswer[]
}

model OnboardingAnswer {
  answerId    String             @id
  answer_text String
  questionId  String
  userId      String
  babyId      String
  baby        Baby               @relation(fields: [babyId], references: [babyId])
  question    OnboardingQuestion @relation(fields: [questionId], references: [questionId])
  user        User               @relation(fields: [userId], references: [userId])
}

model RecommendedPlan {
  ageInMonth String @id
  numOfNaps  Int
  wakeWindow Float
}

model Medicine {
  medicineId String @id
  name       String
  user       User   @relation(fields: [userId], references: [userId])
  userId     String
}
